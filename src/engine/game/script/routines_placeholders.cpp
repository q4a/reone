/*
 * Copyright (c) 2020-2021 The reone project contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/** @file
 *  Placeholders for routine implementations.
 */

#include "routines.h"

using namespace std;

using namespace reone::script;

namespace reone {

namespace game {

Variable Routines::addAvailableNPCByObject(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::addAvailablePUPByObject(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::addAvailablePUPByTemplate(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::addBonusForcePoints(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::addJournalQuestEntry(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::addJournalWorldEntry(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::addJournalWorldEntryStrref(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::addMultiClass(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::addPartyPuppet(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::addToParty(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::adjustAlignment(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::adjustCreatureAttributes(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::adjustCreatureSkills(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::adjustReputation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::ambientSoundChangeDay(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::ambientSoundChangeNight(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::ambientSoundPlay(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::ambientSoundSetDayVolume(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::ambientSoundSetNightVolume(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::ambientSoundStop(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::angleToVector(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::applyEffectAtLocation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::assignPUP(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::aurPostString(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::awardStealthXP(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::barkString(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::beginConversation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::cancelCombat(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::cancelPostDialogCharacterSwitch(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::changeFactionByFaction(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::changeItemCost(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::changeObjectAppearance(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::createItemOnFloor(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::creatureFlourishWeapon(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::cutsceneMove(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::decrementGlobalNumber(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::deleteJournalWorldAllEntries(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::deleteJournalWorldEntry(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::deleteJournalWorldEntryStrref(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::detonateMine(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::disableHealthRegen(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::disableMap(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::disableVideoEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::displayDatapad(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::displayFeedBackText(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::displayMessageBox(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::doDoorAction(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::doPlaceableObjectAction(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::doSinglePlayerAutoSave(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::duplicateHeadAppearance(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::enableRain(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::enableRendering(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::enableVideoEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::endGame(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::eventActivateItem(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::eventConversation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::eventSpellCastAt(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::exploreAreaForPlayer(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::exportAllCharacters(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::extraordinaryEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::floatingTextStrRefOnCreature(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::floatingTextStringOnCreature(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::forceHeartbeat(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::fortitudeSave(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getAC(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getAbilityModifier(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getAlignmentGoodEvil(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getAppearanceType(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getAreaOfEffectCreator(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getAttemptedMovementTarget(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getBlockingCreature(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getBlockingDoor(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getBonusForcePoints(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getButtonMashCheck(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getCasterLevel(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getCategoryFromTalent(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getChallengeRating(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getCheatCode(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getChemicalPieceValue(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getChemicals(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getClickingObject(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getCombatActionsPending(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getCreatureHasTalent(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getCreatureMovmentType(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getCreatureSize(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getCreatureTalentBest(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getCreatureTalentRandom(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getCurrentForcePoints(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getDamageDealtByType(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getDifficultyModifier(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getEffectCreator(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getEffectDurationType(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getEffectSpellId(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getEffectSubType(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getEffectType(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getEncounterActive(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getEncounterDifficulty(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getEncounterSpawnsCurrent(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getEncounterSpawnsMax(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFactionAverageGoodEvilAlignment(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFactionAverageLevel(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFactionAverageReputation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFactionAverageXP(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFactionBestAC(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFactionGold(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFactionLeader(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFactionLeastDamagedMember(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFactionMostDamagedMember(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFactionMostFrequentClass(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFactionStrongestMember(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFactionWeakestMember(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFactionWorstAC(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFeatAcquired(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFirstAttacker(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFirstEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFirstFactionMember(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFirstInPersistentObject(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFirstObjectInArea(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFirstObjectInShape(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFortitudeSavingThrow(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getFoundEnemyCreature(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getGameDifficulty(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getGoingToBeAttackedBy(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getGoldPieceValue(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getGoodEvilValue(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getHasFeatEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getHasInventory(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getHasSpellEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getHealTarget(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIdFromTalent(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getInfluence(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getInventoryDisturbItem(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getInventoryDisturbType(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsConversationActive(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsDoorActionPossible(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsEffectValid(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsEncounterCreature(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsImmune(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsInConversation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsLinkImmune(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsListening(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsLiveContentAvailable(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsPartyLeader(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsPlaceableObjectActionPossible(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsPlayableRacialType(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsPlayerMadeCharacter(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsPoisoned(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsPuppet(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsTalentValid(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsTrapped(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsWeaponEffective(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getIsXBox(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getItemACValue(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getItemActivated(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getItemActivatedTarget(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getItemActivatedTargetLocation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getItemActivator(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getItemComponent(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getItemComponentPieceValue(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getItemHasItemProperty(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getItemPossessor(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getJournalEntry(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getJournalQuestExperience(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastAssociateCommand(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastAttackMode(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastAttackResult(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastAttackType(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastAttacker(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastClosedBy(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastCombatFeatUsed(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastConversation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastDamager(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastDisarmed(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastDisturbed(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastForcePowerUsed(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastForfeitViolation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastHostileActor(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastItemEquipped(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastKiller(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastLocked(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastPazaakResult(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastPlayerDied(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastPlayerDying(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastRespawnButtonPresser(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastSpeaker(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastSpell(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastSpellCaster(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastSpellHarmful(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastTrapDetected(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastUnlocked(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastUsedBy(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLastWeaponUsed(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getListenPatternNumber(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLockKeyRequired(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLockKeyTag(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLockLockDC(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLockLockable(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getLockUnlockDC(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getMatchedSubstring(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getMatchedSubstringsCount(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getMaxForcePoints(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getMetaMagicFeat(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getModuleFileName(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getModuleItemAcquired(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getModuleItemAcquiredFrom(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getModuleItemLost(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getModuleItemLostBy(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getModuleName(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getMovementRate(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getNPCSelectability(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getNearestTrapToObject(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getNextAttacker(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getNextEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getNextFactionMember(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getNextInPersistentObject(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getNextObjectInArea(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getNextObjectInShape(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getNextPC(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getNumStackedItems(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getObjectPersonalSpace(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getOwnerDemolitionsSkill(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getPCLevellingUp(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getPUPOwner(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getPartyAIStyle(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getPlaceableIllumination(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getPlanetAvailable(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getPlanetSelectable(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getRacialSubType(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getRandomDestination(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getReflexAdjustedDamage(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getReflexSavingThrow(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getReputation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getScriptParameter(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getScriptStringParameter(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getSelectedPlanet(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getSkillRankBase(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getSpellAcquired(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getSpellBaseForcePointCost(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getSpellCastItem(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getSpellForcePointCost(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getSpellFromMask(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getSpellId(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getSpellSaveDC(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getSpellTargetLocation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getSpellTargetObject(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getStrRefSoundDuration(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getSubScreenID(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getTotalDamageDealt(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getTransitionTarget(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getTrapBaseType(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getTrapCreator(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getTrapDetectDC(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getTrapDetectable(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getTrapDetectedBy(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getTrapDisarmDC(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getTrapDisarmable(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getTrapFlagged(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getTrapKeyTag(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getTrapOneShot(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getTypeFromTalent(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getWasForcePowerSuccessful(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getWeaponRanged(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::getWillSavingThrow(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::giveItem(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::givePlotXP(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::grantFeat(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::grantSpell(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::hasLineOfSight(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::holdWorldFadeInForDialog(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::incrementGlobalNumber(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::isCreditSequenceInProgress(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::isFormActive(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::isInTotalDefense(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::isMeditating(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::isMoviePlaying(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::isRunning(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::isStealthed(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::magicalEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::modifyFortitudeSavingThrowBase(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::modifyInfluence(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::modifyReflexSavingThrowBase(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::modifyWillSavingThrowBase(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::musicBackgroundChangeDay(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::musicBackgroundChangeNight(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::musicBackgroundGetBattleTrack(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::musicBackgroundGetDayTrack(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::musicBackgroundGetNightTrack(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::musicBackgroundPlay(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::musicBackgroundSetDelay(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::musicBackgroundStop(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::musicBattleChange(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::musicBattlePlay(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::musicBattleStop(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::noClicksFor(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::openStore(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::pauseGame(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::playMovieQueue(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::playOverlayAnimation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::playPazaak(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::playRoomAnimation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::playRumblePattern(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::playSound(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::playVisualAreaEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::popUpDeathGUIPanel(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::popUpGUIPanel(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::queueMovie(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::randomName(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::rebuildPartyTable(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::reflexSave(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::removeEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::removeEffectByExactMatch(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::removeEffectByID(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::removeFromParty(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::removeHeartbeat(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::removeJournalQuestEntry(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::removeNPCFromPartyToBase(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::resetCreatureAILevel(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::resetDialogState(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::resistForce(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::revealMap(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::saveNPCByObject(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::saveNPCState(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::savePUPByObject(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::sendMessageToPC(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setAreaFogColor(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setAreaTransitionBMP(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setAssociateListenPatterns(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setAvailableNPCId(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setBonusForcePoints(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setButtonMashCheck(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setCameraFacing(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setCameraMode(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setCreatureAILevel(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setCurrentForm(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setCustomToken(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setDialogPlaceableCamera(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setDisableTransit(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setEffectIcon(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setEncounterActive(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setEncounterDifficulty(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setEncounterSpawnsCurrent(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setEncounterSpawnsMax(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setFadeUntilScript(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setFakeCombatState(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setForceAlwaysUpdate(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setForcePowerUnsuccessful(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setForfeitConditions(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setFormation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setGlobalFadeIn(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setGlobalFadeOut(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setGoodEvilValue(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setHealTarget(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setInfluence(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setInputClass(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setIsDestroyable(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setListening(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setItemNonEquippable(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setJournalQuestEntryPicture(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setKeepStealthInDialog(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setLightsaberPowered(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setListenPattern(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setLockHeadFollowInDialog(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setLockOrientationInDialog(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setMapPinEnabled(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setMusicVolume(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setNPCSelectability(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setOrientOnClick(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setPartyAIStyle(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setPlaceableIllumination(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setPlanetAvailable(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setPlanetSelectable(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setReturnStrref(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setTrapDetectedBy(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setTrapDisabled(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::setTutorialWindowsEnabled(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::showChemicalUpgradeScreen(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::showDemoScreen(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::showGalaxyMap(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::showLevelUpGUI(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::showSwoopUpgradeScreen(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::showTutorialWindow(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::showUpgradeScreen(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::soundObjectFadeAndStop(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::soundObjectGetFixedVariance(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::soundObjectGetPitchVariance(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::soundObjectGetVolume(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::soundObjectSetFixedVariance(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::soundObjectSetPitchVariance(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::soundObjectSetPosition(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::soundObjectSetVolume(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::spawnAvailableNPC(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::spawnAvailablePUP(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::spawnMine(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::speakOneLinerConversation(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::speakString(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::startCreditSequence(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::stopRumblePattern(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::supernaturalEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::suppressStatusSummaryEntry(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::surrenderByFaction(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::surrenderRetainBuffs(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::surrenderToEnemies(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::switchPlayerCharacter(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::talentFeat(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::talentSkill(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::talentSpell(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::testStringAgainstPattern(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::touchAttackMelee(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::touchAttackRanged(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::unlockAllSongs(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::vectorToAngle(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::versusAlignmentEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::versusRacialTypeEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::versusTrapEffect(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::willSave(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::writeTimestampedLogEntry(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }
Variable Routines::yavinHackCloseDoor(const VariablesList &args, ExecutionContext &ctx) { return Variable::notImplemented(); }

} // namespace game

} // namespace reone
